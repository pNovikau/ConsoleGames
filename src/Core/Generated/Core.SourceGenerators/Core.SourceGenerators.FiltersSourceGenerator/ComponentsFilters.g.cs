// <auto-generated/>
using System.Collections;
using Core.Ecs.Components;
using Core.Ecs.Managers;

namespace Core.Ecs.ComponentFilters;
public partial class ComponentsFilter<TComponent> : ComponentsFilter, IEnumerable

{
    public ComponentsFilter(IEntityManager entityManager, IComponentManager componentManager)
        : base(entityManager, componentManager,
            IComponent<TComponent>.ComponentType) { }


    public Enumerator GetEnumerator() => new(this);

    IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

    public struct Enumerator : IEnumerator, IDisposable
    {
        private readonly ComponentsFilter<TComponent> _componentFilter;

        private int _index = -1;

        public Enumerator(ComponentsFilter<TComponent> componentFilter) : this()
        {
            _componentFilter = componentFilter;

            _componentFilter.IsBusy = true;
        }

        public bool MoveNext()
        {
            if (_index == _componentFilter.EntitiesIds.Count - 1)
                return false;

            _index++;
            return true;
        }

        public void Reset()
        {
            _index = -1;
        }

        public ComponentsTuple<TComponent> Current
        {
            get
            {
                ref var entity = ref _componentFilter.EntityManager.Get(_componentFilter.EntitiesIds[_index]);

                var componentId0 = entity.Components[IComponent<TComponent>.ComponentType];
                var component0 = _componentFilter.ComponentManager.GetComponentAsSpan<TComponent>(componentId0);

                return new ComponentsTuple<TComponent>(_componentFilter.EntitiesIds[_index], component0);

            }
        }

        object IEnumerator.Current => throw new NotImplementedException();

        public void Dispose()
        {
            Reset();
            _componentFilter.IsBusy = false;
        }
    }
}


public partial class ComponentsFilter<TComponent,TComponent1> : ComponentsFilter, IEnumerable

{
    public ComponentsFilter(IEntityManager entityManager, IComponentManager componentManager)
        : base(entityManager, componentManager,
            IComponent<TComponent>.ComponentType, 
            IComponent<TComponent1>.ComponentType) { }


    public Enumerator GetEnumerator() => new(this);

    IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

    public struct Enumerator : IEnumerator, IDisposable
    {
        private readonly ComponentsFilter<TComponent, TComponent1> _componentFilter;

        private int _index = -1;

        public Enumerator(ComponentsFilter<TComponent, TComponent1> componentFilter) : this()
        {
            _componentFilter = componentFilter;

            _componentFilter.IsBusy = true;
        }

        public bool MoveNext()
        {
            if (_index == _componentFilter.EntitiesIds.Count - 1)
                return false;

            _index++;
            return true;
        }

        public void Reset()
        {
            _index = -1;
        }

        public ComponentsTuple<TComponent, TComponent1> Current
        {
            get
            {
                ref var entity = ref _componentFilter.EntityManager.Get(_componentFilter.EntitiesIds[_index]);

                var componentId0 = entity.Components[IComponent<TComponent>.ComponentType];
                var component0 = _componentFilter.ComponentManager.GetComponentAsSpan<TComponent>(componentId0);

                var componentId1 = entity.Components[IComponent<TComponent1>.ComponentType];
                var component1 = _componentFilter.ComponentManager.GetComponentAsSpan<TComponent1>(componentId1);

                return new ComponentsTuple<TComponent,TComponent1>(_componentFilter.EntitiesIds[_index], component0, component1);

            }
        }

        object IEnumerator.Current => throw new NotImplementedException();

        public void Dispose()
        {
            Reset();
            _componentFilter.IsBusy = false;
        }
    }
}


public partial class ComponentsFilter<TComponent,TComponent1,TComponent2> : ComponentsFilter, IEnumerable

{
    public ComponentsFilter(IEntityManager entityManager, IComponentManager componentManager)
        : base(entityManager, componentManager,
            IComponent<TComponent>.ComponentType, 
            IComponent<TComponent1>.ComponentType, 
            IComponent<TComponent2>.ComponentType) { }


    public Enumerator GetEnumerator() => new(this);

    IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

    public struct Enumerator : IEnumerator, IDisposable
    {
        private readonly ComponentsFilter<TComponent, TComponent1, TComponent2> _componentFilter;

        private int _index = -1;

        public Enumerator(ComponentsFilter<TComponent, TComponent1, TComponent2> componentFilter) : this()
        {
            _componentFilter = componentFilter;

            _componentFilter.IsBusy = true;
        }

        public bool MoveNext()
        {
            if (_index == _componentFilter.EntitiesIds.Count - 1)
                return false;

            _index++;
            return true;
        }

        public void Reset()
        {
            _index = -1;
        }

        public ComponentsTuple<TComponent, TComponent1, TComponent2> Current
        {
            get
            {
                ref var entity = ref _componentFilter.EntityManager.Get(_componentFilter.EntitiesIds[_index]);

                var componentId0 = entity.Components[IComponent<TComponent>.ComponentType];
                var component0 = _componentFilter.ComponentManager.GetComponentAsSpan<TComponent>(componentId0);

                var componentId1 = entity.Components[IComponent<TComponent1>.ComponentType];
                var component1 = _componentFilter.ComponentManager.GetComponentAsSpan<TComponent1>(componentId1);

                var componentId2 = entity.Components[IComponent<TComponent2>.ComponentType];
                var component2 = _componentFilter.ComponentManager.GetComponentAsSpan<TComponent2>(componentId2);

                return new ComponentsTuple<TComponent,TComponent1,TComponent2>(_componentFilter.EntitiesIds[_index], component0, component1, component2);

            }
        }

        object IEnumerator.Current => throw new NotImplementedException();

        public void Dispose()
        {
            Reset();
            _componentFilter.IsBusy = false;
        }
    }
}


public partial class ComponentsFilter<TComponent,TComponent1,TComponent2,TComponent3> : ComponentsFilter, IEnumerable

{
    public ComponentsFilter(IEntityManager entityManager, IComponentManager componentManager)
        : base(entityManager, componentManager,
            IComponent<TComponent>.ComponentType, 
            IComponent<TComponent1>.ComponentType, 
            IComponent<TComponent2>.ComponentType, 
            IComponent<TComponent3>.ComponentType) { }


    public Enumerator GetEnumerator() => new(this);

    IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

    public struct Enumerator : IEnumerator, IDisposable
    {
        private readonly ComponentsFilter<TComponent, TComponent1, TComponent2, TComponent3> _componentFilter;

        private int _index = -1;

        public Enumerator(ComponentsFilter<TComponent, TComponent1, TComponent2, TComponent3> componentFilter) : this()
        {
            _componentFilter = componentFilter;

            _componentFilter.IsBusy = true;
        }

        public bool MoveNext()
        {
            if (_index == _componentFilter.EntitiesIds.Count - 1)
                return false;

            _index++;
            return true;
        }

        public void Reset()
        {
            _index = -1;
        }

        public ComponentsTuple<TComponent, TComponent1, TComponent2, TComponent3> Current
        {
            get
            {
                ref var entity = ref _componentFilter.EntityManager.Get(_componentFilter.EntitiesIds[_index]);

                var componentId0 = entity.Components[IComponent<TComponent>.ComponentType];
                var component0 = _componentFilter.ComponentManager.GetComponentAsSpan<TComponent>(componentId0);

                var componentId1 = entity.Components[IComponent<TComponent1>.ComponentType];
                var component1 = _componentFilter.ComponentManager.GetComponentAsSpan<TComponent1>(componentId1);

                var componentId2 = entity.Components[IComponent<TComponent2>.ComponentType];
                var component2 = _componentFilter.ComponentManager.GetComponentAsSpan<TComponent2>(componentId2);

                var componentId3 = entity.Components[IComponent<TComponent3>.ComponentType];
                var component3 = _componentFilter.ComponentManager.GetComponentAsSpan<TComponent3>(componentId3);

                return new ComponentsTuple<TComponent,TComponent1,TComponent2,TComponent3>(_componentFilter.EntitiesIds[_index], component0, component1, component2, component3);

            }
        }

        object IEnumerator.Current => throw new NotImplementedException();

        public void Dispose()
        {
            Reset();
            _componentFilter.IsBusy = false;
        }
    }
}


public partial class ComponentsFilter<TComponent,TComponent1,TComponent2,TComponent3,TComponent4> : ComponentsFilter, IEnumerable

{
    public ComponentsFilter(IEntityManager entityManager, IComponentManager componentManager)
        : base(entityManager, componentManager,
            IComponent<TComponent>.ComponentType, 
            IComponent<TComponent1>.ComponentType, 
            IComponent<TComponent2>.ComponentType, 
            IComponent<TComponent3>.ComponentType, 
            IComponent<TComponent4>.ComponentType) { }


    public Enumerator GetEnumerator() => new(this);

    IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

    public struct Enumerator : IEnumerator, IDisposable
    {
        private readonly ComponentsFilter<TComponent, TComponent1, TComponent2, TComponent3, TComponent4> _componentFilter;

        private int _index = -1;

        public Enumerator(ComponentsFilter<TComponent, TComponent1, TComponent2, TComponent3, TComponent4> componentFilter) : this()
        {
            _componentFilter = componentFilter;

            _componentFilter.IsBusy = true;
        }

        public bool MoveNext()
        {
            if (_index == _componentFilter.EntitiesIds.Count - 1)
                return false;

            _index++;
            return true;
        }

        public void Reset()
        {
            _index = -1;
        }

        public ComponentsTuple<TComponent, TComponent1, TComponent2, TComponent3, TComponent4> Current
        {
            get
            {
                ref var entity = ref _componentFilter.EntityManager.Get(_componentFilter.EntitiesIds[_index]);

                var componentId0 = entity.Components[IComponent<TComponent>.ComponentType];
                var component0 = _componentFilter.ComponentManager.GetComponentAsSpan<TComponent>(componentId0);

                var componentId1 = entity.Components[IComponent<TComponent1>.ComponentType];
                var component1 = _componentFilter.ComponentManager.GetComponentAsSpan<TComponent1>(componentId1);

                var componentId2 = entity.Components[IComponent<TComponent2>.ComponentType];
                var component2 = _componentFilter.ComponentManager.GetComponentAsSpan<TComponent2>(componentId2);

                var componentId3 = entity.Components[IComponent<TComponent3>.ComponentType];
                var component3 = _componentFilter.ComponentManager.GetComponentAsSpan<TComponent3>(componentId3);

                var componentId4 = entity.Components[IComponent<TComponent4>.ComponentType];
                var component4 = _componentFilter.ComponentManager.GetComponentAsSpan<TComponent4>(componentId4);

                return new ComponentsTuple<TComponent,TComponent1,TComponent2,TComponent3,TComponent4>(_componentFilter.EntitiesIds[_index], component0, component1, component2, component3, component4);

            }
        }

        object IEnumerator.Current => throw new NotImplementedException();

        public void Dispose()
        {
            Reset();
            _componentFilter.IsBusy = false;
        }
    }
}

